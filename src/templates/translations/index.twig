{% extends "translation-manager/_layouts/cp" %}
{% set title = "Translations" %}
{% set fullPageForm = false %}
{% set selectedSubnavItem = 'translations' %}

{# Set up breadcrumbs with site switcher #}
{% set crumbs = [] %}

{# Site switcher (first item) - like Smart Links #}
{% if craft.app.getIsMultiSite() %}
    {# Get site menu items #}
    {% set siteMenuItems = [] %}
    {% for site in allSites %}
        {% set siteMenuItems = siteMenuItems|merge([{
            label: site.name,
            url: url('translation-manager/translations', {siteId: site.id, status: status, type: type, search: search, sort: sort, dir: dir}),
            selected: site.id == currentSiteId
        }]) %}
    {% endfor %}
    
    {% set crumbs = [{
        id: 'site-crumb',
        icon: 'world',
        label: currentSite.name|t('site'),
        menu: {
            items: siteMenuItems,
            label: 'Select site'|t('app')
        }
    }] %}
{% endif %}

{# Main navigation #}
{% set plugin = craft.app.plugins.getPlugin('translation-manager') %}
{% set crumbs = crumbs|merge([
    {
        label: plugin.settings.pluginName|t('translation-manager'),
        url: url('translation-manager'),
    },
    {
        label: 'Translations'|t('translation-manager'),
        url: url('translation-manager/translations'),
    },
]) %}

{% block toolbar %}
    <div id="toolbar" class="flex">
        <div class="flex-grow">
            <form method="get" action="{{ url('translation-manager') }}">
                {# Preserve other parameters #}
                <input type="hidden" name="siteId" value="{{ currentSiteId }}">
                <input type="hidden" name="type" value="{{ type }}">
                <input type="hidden" name="status" value="{{ status }}">
                <input type="hidden" name="sort" value="{{ sort }}">
                <input type="hidden" name="dir" value="{{ dir }}">
                <div class="flex">
                    <div class="btngroup">
                        <button type="button" class="btn menubtn statusmenubtn">
                            <span class="status {{ status == 'all' ? 'all' : (status == 'pending' ? 'orange' : (status == 'translated' ? 'teal' : (status == 'unused' ? 'gray' : ''))) }}"></span>
                            {% if status == 'all' %}
                                All
                            {% elseif status == 'unused' %}
                                Unused
                            {% else %}
                                {{ status|capitalize }}
                            {% endif %}
                        </button>
                        <div class="menu">
                            <ul>
                                <li><a class="{{ status == 'all' ? 'sel' : '' }}" href="?siteId={{ currentSiteId }}&status=all&type={{ type }}&search={{ search }}&sort={{ sort }}&dir={{ dir }}">
                                    <span class="status all"></span>All
                                </a></li>
                                <li><hr class="padded"></li>
                                <li class="menu-header">Status</li>
                                <li><a class="{{ status == 'pending' ? 'sel' : '' }}" href="?siteId={{ currentSiteId }}&status=pending&type={{ type }}&search={{ search }}&sort={{ sort }}&dir={{ dir }}">
                                    <span class="status orange"></span>Pending
                                </a></li>
                                <li><a class="{{ status == 'translated' ? 'sel' : '' }}" href="?siteId={{ currentSiteId }}&status=translated&type={{ type }}&search={{ search }}&sort={{ sort }}&dir={{ dir }}">
                                    <span class="status teal"></span>Translated
                                </a></li>
                                <li><a class="{{ status == 'unused' ? 'sel' : '' }}" href="?siteId={{ currentSiteId }}&status=unused&type={{ type }}&search={{ search }}&sort={{ sort }}&dir={{ dir }}">
                                    <span class="status gray"></span>Unused
                                </a></li>
                                {% if settings.enableFormieIntegration or settings.enableSiteTranslations %}
                                <li><hr class="padded"></li>
                                <li class="menu-header">Type</li>
                                <li><a class="{{ type == 'all' ? 'sel' : '' }}" href="?type=all&status={{ status }}&search={{ search }}&sort={{ sort }}&dir={{ dir }}">
                                    <span class="status {{ type == 'all' ? 'blue' : 'disabled' }}"></span>All Types
                                </a></li>
                                {% if settings.enableFormieIntegration %}
                                <li><a class="{{ type == 'forms' ? 'sel' : '' }}" href="?type=forms&status={{ status }}&search={{ search }}&sort={{ sort }}&dir={{ dir }}">
                                    <span class="status {{ type == 'forms' ? 'blue' : 'disabled' }}"></span>{{ craft.translationManager.getFormiePluginName() }}
                                </a></li>
                                {% endif %}
                                {% if settings.enableSiteTranslations %}
                                <li><a class="{{ type == 'site' ? 'sel' : '' }}" href="?type=site&status={{ status }}&search={{ search }}&sort={{ sort }}&dir={{ dir }}">
                                    <span class="status {{ type == 'site' ? 'blue' : 'disabled' }}"></span>Site
                                </a></li>
                                {% endif %}
                                {% endif %}
                            </ul>
                        </div>
                    </div>
                    <div class="search-container texticon flex-grow">
                        <span class="texticon-icon search icon" aria-hidden="true"></span>
                        <input type="text" 
                               class="clearable text fullwidth" 
                               name="search" 
                               value="{{ search }}" 
                               placeholder="{{ 'Search'|t('translation-manager') }}" 
                               autocomplete="off" 
                               dir="ltr"
                               aria-label="Search"
                               {% if search %}autofocus{% endif %}>
                        <button type="button" class="clear-btn {{ search ? '' : 'hidden' }}" 
                                title="Clear search" 
                                role="button" 
                                aria-label="Clear search"></button>
                    </div>
                </div>
            </form>
        </div>
    </div>
{% endblock %}

{% block content %}
    <style>
        .translation-text {
            direction: {{ currentSite.language starts with 'ar' ? 'rtl' : 'ltr' }};
            font-family: system-ui, -apple-system, sans-serif;
            font-size: 1rem;
            line-height: 1.5;
            padding: 0.5rem;
            border: 1px solid #cdd8e4;
            border-radius: 0.25rem;
            width: 100%;
            min-height: 40px;
            resize: vertical;
            field-sizing: content;
            max-height: 300px;
            overflow-y: auto;
        }
        
        
        
        .page-info {
            margin: 0 12px;
            color: #596673;
        }
        
        /* Checkbox cells */
        .checkbox-cell {
            width: 40px !important;
            text-align: center;
        }
        
        /* Pagination styles */
        .pagination {
            gap: 4px;
            align-items: center;
        }
        
        /* Menu header styling */
        .menu-header {
            font-size: 11px;
            text-transform: uppercase;
            color: #7c97b2;
            padding: 8px 14px 4px;
            font-weight: 600;
            letter-spacing: 0.5px;
        }
        
        /* Make gray status more visible in active button */
        .statusmenubtn .status.gray {
            background-color: #8c97a3 !important;
        }
        
    </style>
    
    <div id="elements" class="elements">
        <div class="tableview tablepane">
            <table class="data fullwidth">
                <thead>
                    <tr>
                        <th class="checkbox-cell selectallcontainer">
                            <div class="checkbox" role="checkbox" tabindex="0" aria-checked="false" aria-label="Select all"></div>
                        </th>
                        {% if settings.enableFormieIntegration and settings.enableSiteTranslations %}
                        <th scope="col" data-attribute="type" class="orderable {{ sort == 'type' ? 'ordered ' ~ dir : '' }}" aria-sort="{{ sort == 'type' ? (dir == 'asc' ? 'ascending' : 'descending') : 'none' }}">
                            <button type="button" aria-pressed="{{ sort == 'type' ? 'true' : 'false' }}" data-sort="type">
                                Type
                                <div class="spinner"></div>
                            </button>
                        </th>
                        {% endif %}
                        <th scope="col" data-attribute="translationKey" class="orderable {{ sort == 'translationKey' ? 'ordered ' ~ dir : '' }}" aria-sort="{{ sort == 'translationKey' ? (dir == 'asc' ? 'ascending' : 'descending') : 'none' }}">
                            <button type="button" aria-pressed="{{ sort == 'translationKey' ? 'true' : 'false' }}" data-sort="translationKey">
                                Translation Key
                                <div class="spinner"></div>
                            </button>
                        </th>
                        <th scope="col" data-attribute="translation" class="orderable {{ sort == 'translation' ? 'ordered ' ~ dir : '' }}" aria-sort="{{ sort == 'translation' ? (dir == 'asc' ? 'ascending' : 'descending') : 'none' }}">
                            <button type="button" aria-pressed="{{ sort == 'translation' ? 'true' : 'false' }}" data-sort="translation">
                                Translation ({{ currentSite.name }})
                                <div class="spinner"></div>
                            </button>
                        </th>
                        <th scope="col" data-attribute="status" class="orderable {{ sort == 'status' ? 'ordered ' ~ dir : '' }}" aria-sort="{{ sort == 'status' ? (dir == 'asc' ? 'ascending' : 'descending') : 'none' }}">
                            <button type="button" aria-pressed="{{ sort == 'status' ? 'true' : 'false' }}" data-sort="status">
                                Status
                                <div class="spinner"></div>
                            </button>
                        </th>
                        {% if settings.showContext %}
                            <th scope="col">Context</th>
                        {% endif %}
                    </tr>
                </thead>
                <tbody>
                    {% for translation in translations %}
                        <tr data-id="{{ translation.id }}" class="{{ translation.status == 'unused' ? 'not-used' : '' }}">
                            <td class="checkbox-cell">
                                <div class="checkbox" title="Select" tabindex="0" aria-checked="false" aria-label="{{ translation.translationKey }}" role="checkbox"></div>
                            </td>
                            {% if settings.enableFormieIntegration and settings.enableSiteTranslations %}
                            <td>
                                {% if translation.context starts with 'formie.' %}
                                    <span class="light">{{ craft.translationManager.getFormiePluginName() }}</span>
                                {% else %}
                                    <span class="light">Site</span>
                                {% endif %}
                            </td>
                            {% endif %}
                            <td style="white-space: pre-wrap;">{{ translation.translationKey|e }}</td>
                            <td>
                                <textarea class="translation-text" placeholder="{% if currentSite.language starts with 'ar' %}أدخل الترجمة العربية هنا...{% else %}Enter translation for {{ currentSite.name }}...{% endif %}">{{ translation.translation|e }}</textarea>
                            </td>
                            <td>
                                {% if translation.status == 'unused' %}
                                    <span class="status-label gray">
                                        <span class="status gray"></span>
                                        <span class="status-label-text">Unused</span>
                                    </span>
                                {% elseif translation.status == 'pending' %}
                                    <span class="status-label orange">
                                        <span class="status orange"></span>
                                        <span class="status-label-text">Pending</span>
                                    </span>
                                {% elseif translation.status == 'translated' %}
                                    <span class="status-label teal">
                                        <span class="status teal"></span>
                                        <span class="status-label-text">Translated</span>
                                    </span>
                                {% endif %}
                            </td>
                            {% if settings.showContext %}
                                <td class="light">{{ translation.context|e }}</td>
                            {% endif %}
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
    
    <div id="footer" class="flex-justify flex">
        <div id="count-spinner" class="spinner small hidden"></div>
        <div id="count-container" class="light">
            <div class="pagination flex">
                <nav class="flex" aria-label="entry pagination">
                    <button type="button" role="button" class="page-link prev-page {{ page <= 1 ? 'disabled' : '' }}" {{ page <= 1 ? 'disabled' : '' }} title="Previous Page"></button><button type="button" role="button" class="page-link next-page {{ page >= totalPages ? 'disabled' : '' }}" {{ page >= totalPages ? 'disabled' : '' }} title="Next Page"></button>
                </nav>
                <div class="page-info">
                    {% set endRange = min(offset + limit, totalCount) %}
                    {% if totalCount == 0 %}
                        No entries
                    {% else %}
                        {{ offset + 1 }}–{{ endRange }} of {{ totalCount }} {{ totalCount == 1 ? 'entry' : 'entries' }}
                    {% endif %}
                </div>
            </div>
        </div>
        <div id="actions-container" class="{% if not settings.autoExport and currentUser.can('translationManager:exportTranslations') %}flex{% else %}hidden{% endif %}">
            {% if not settings.autoExport and currentUser.can('translationManager:exportTranslations') %}
                <form>
                    <button type="button" class="btn secondary menubtn" data-icon="settings" title="Generate translation files" id="generate-menu-btn"></button>
                    <div class="menu" data-align="right">
                        <ul>
                            <li><a href="#" id="generate-all-btn">
                                Generate All Files
                            </a></li>
                            {% if settings.enableFormieIntegration %}
                            <li><a href="#" id="generate-formie-btn">
                                Generate {{ craft.translationManager.getFormiePluginName() }} Files Only
                            </a></li>
                            {% endif %}
                            {% if settings.enableSiteTranslations %}
                            <li><a href="#" id="generate-site-btn">
                                Generate {{ settings.translationCategory|title }} Files Only
                            </a></li>
                            {% endif %}
                        </ul>
                    </div>
                </form>
            {% endif %}
        </div>
        <div class="flex flex-nowrap">
            {% if currentUser.can('translationManager:exportTranslations') %}
                <button type="button" class="btn" id="export-btn" tabindex="0" aria-expanded="false" title="Export translations as CSV file">Export…</button>
            {% endif %}
            {% if currentUser.can('translationManager:editTranslations') %}
                <button type="button" class="btn submit" id="save-all-btn" tabindex="0">
                    <div class="gap-xs inline-flex"><div class="label">Save All Changes</div></div>
                    <div class="spinner spinner-absolute"></div>
                </button>
            {% endif %}
        </div>
    </div>

    <script>
        // Initialize Craft's menu button functionality
        // Note: Craft may not have ui namespace in newer versions
        document.querySelectorAll('.menubtn').forEach(btn => {
            if (typeof Craft !== 'undefined' && Craft.MenuBtn) {
                new Craft.MenuBtn(btn);
            } else if (typeof Garnish !== 'undefined' && Garnish.MenuBtn) {
                new Garnish.MenuBtn(btn);
            }
        });
        
        // Clear search button
        const clearBtn = document.querySelector('.clear-btn');
        if (clearBtn) {
            clearBtn.addEventListener('click', function() {
                const searchInput = this.previousElementSibling;
                searchInput.value = '';
                searchInput.form.submit();
            });
        }
        
        // Handle search form submission on Enter key
        const searchInput = document.querySelector('input[name="search"]');
        if (searchInput) {
            searchInput.addEventListener('keyup', function(e) {
                if (e.key === 'Enter') {
                    this.form.submit();
                }
            });
            
            // Also submit on blur if value changed
            let originalValue = searchInput.value;
            searchInput.addEventListener('blur', function() {
                if (this.value !== originalValue) {
                    this.form.submit();
                }
            });
        }
        
        // Sort buttons
        document.querySelectorAll('th.orderable button').forEach(button => {
            button.addEventListener('click', function() {
                const sortField = this.dataset.sort;
                const currentSort = '{{ sort }}';
                const currentDir = '{{ dir }}';
                let newDir = 'asc';
                
                if (sortField === currentSort) {
                    newDir = currentDir === 'asc' ? 'desc' : 'asc';
                }
                
                window.location.href = '?siteId={{ currentSiteId }}&type={{ type }}&status={{ status }}&search={{ search }}&sort=' + sortField + '&dir=' + newDir + '&page=1';
            });
        });
        
        // Pagination buttons
        document.querySelector('.prev-page:not(.disabled)')?.addEventListener('click', function() {
            window.location.href = '?siteId={{ currentSiteId }}&type={{ type }}&status={{ status }}&search={{ search }}&sort={{ sort }}&dir={{ dir }}&page={{ page - 1 }}';
        });
        
        document.querySelector('.next-page:not(.disabled)')?.addEventListener('click', function() {
            window.location.href = '?siteId={{ currentSiteId }}&type={{ type }}&status={{ status }}&search={{ search }}&sort={{ sort }}&dir={{ dir }}&page={{ page + 1 }}';
        });
        
        // Checkbox functionality
        const selectAllCheckbox = document.querySelector('.selectallcontainer .checkbox');
        const checkboxes = document.querySelectorAll('tbody .checkbox');
        let selectedIds = new Set();
        
        // Helper to toggle checkbox state
        function toggleCheckbox(checkbox, checked) {
            if (checked) {
                checkbox.classList.add('checked');
                checkbox.setAttribute('aria-checked', 'true');
            } else {
                checkbox.classList.remove('checked');
                checkbox.setAttribute('aria-checked', 'false');
            }
        }
        
        // Select all functionality
        selectAllCheckbox.addEventListener('click', function() {
            const isChecked = !this.classList.contains('checked');
            toggleCheckbox(this, isChecked);
            
            checkboxes.forEach(checkbox => {
                toggleCheckbox(checkbox, isChecked);
                const id = checkbox.closest('tr').dataset.id;
                if (isChecked) {
                    selectedIds.add(id);
                } else {
                    selectedIds.delete(id);
                }
            });
            
            updateActionButtons();
        });
        
        // Individual checkbox functionality
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('click', function() {
                const isChecked = !this.classList.contains('checked');
                toggleCheckbox(this, isChecked);
                
                const id = this.closest('tr').dataset.id;
                if (isChecked) {
                    selectedIds.add(id);
                } else {
                    selectedIds.delete(id);
                }
                
                // Update select all checkbox
                const allChecked = selectedIds.size === checkboxes.length;
                const someChecked = selectedIds.size > 0;
                toggleCheckbox(selectAllCheckbox, allChecked);
                if (someChecked && !allChecked) {
                    selectAllCheckbox.classList.add('indeterminate');
                } else {
                    selectAllCheckbox.classList.remove('indeterminate');
                }
                
                updateActionButtons();
            });
        });
        
        function updateActionButtons() {
            // Actions container visibility is controlled by Twig based on settings
            // No need to update it dynamically
        }
        
        // Export button
        {% if currentUser.can('translationManager:exportTranslations') %}
        document.getElementById('export-btn')?.addEventListener('click', function(e) {
            e.preventDefault();
            
            if (selectedIds.size > 0) {
                // Export selected
                const ids = Array.from(selectedIds);
                
                // Create and submit a form for download
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '{{ actionUrl('translation-manager/export/selected') }}';
                
                const csrfInput = document.createElement('input');
                csrfInput.type = 'hidden';
                csrfInput.name = '{{ craft.app.config.general.csrfTokenName }}';
                csrfInput.value = '{{ craft.app.request.csrfToken }}';
                form.appendChild(csrfInput);
                
                const idsInput = document.createElement('input');
                idsInput.type = 'hidden';
                idsInput.name = 'ids';
                idsInput.value = JSON.stringify(ids);
                form.appendChild(idsInput);
                
                document.body.appendChild(form);
                form.submit();
                document.body.removeChild(form);
            } else {
                // Export all with current filters
                // Use the same approach as the settings page which we know works
                const actionUrl = '{{ actionUrl('translation-manager/export') }}';
                const type = {{ type|json_encode|raw }};
                const status = {{ status|json_encode|raw }};
                const search = {{ search|json_encode|raw }};
                
                // Build URL manually to avoid encoding issues
                let url = actionUrl;
                url += (actionUrl.indexOf('?') === -1 ? '?' : '&') + 'type=' + encodeURIComponent(type);
                url += '&status=' + encodeURIComponent(status);
                url += '&search=' + encodeURIComponent(search);
                
                window.location.href = url;
            }
        });
        {% endif %}
        
        // Delete selected (only for not used)
        {% if status == 'unused' and currentUser.can('translationManager:deleteTranslations') %}
        const deleteBtn = document.getElementById('delete-selected-btn');
        if (deleteBtn) {
            deleteBtn.addEventListener('click', function(e) {
            e.preventDefault();
            const ids = Array.from(selectedIds);
            
            if (ids.length === 0) return;
            
            if (!confirm(`Are you sure you want to delete ${ids.length} translation${ids.length > 1 ? 's' : ''}?`)) {
                return;
            }
            
            fetch('{{ actionUrl('translation-manager/translations/delete') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'X-CSRF-Token': '{{ craft.app.request.csrfToken }}',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ ids })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Craft.cp.displayNotice(`Deleted ${data.deleted} translations`);
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    Craft.cp.displayError(data.error || 'Failed to delete translations');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Craft.cp.displayError('Failed to delete translations');
            });
            });
        }
        {% endif %}
        
        // Translation Change Tracker
        class TranslationTracker {
            constructor() {
                this.unsavedChanges = new Map();
                this.originalValues = new Map();
                this.savingInProgress = new Set();
            }
            
            init() {
                // Store original values
                document.querySelectorAll('.translation-text').forEach(textarea => {
                    const id = textarea.closest('tr').dataset.id;
                    this.originalValues.set(id, textarea.value.trim());
                });
            }
            
            markChanged(id, value) {
                const original = this.originalValues.get(id) || '';
                if (value.trim() !== original) {
                    this.unsavedChanges.set(id, value);
                } else {
                    this.unsavedChanges.delete(id);
                }
                this.updateUI(id);
            }
            
            markSaved(id, value) {
                this.unsavedChanges.delete(id);
                this.originalValues.set(id, value.trim());
                this.updateUI(id);
            }
            
            updateUI(id) {
                const row = document.querySelector(`tr[data-id="${id}"]`);
                
                if (this.unsavedChanges.has(id)) {
                    // Light orange/yellow background for unsaved changes
                    row.style.backgroundColor = '#fff4e6';
                    row.style.transition = 'background-color 0.2s ease';
                } else {
                    // Reset background
                    row.style.backgroundColor = '';
                }
            }
            
            hasUnsavedChanges() {
                return this.unsavedChanges.size > 0;
            }
            
            getUnsavedChanges() {
                return Array.from(this.unsavedChanges.entries()).map(([id, translationText]) => ({
                    id,
                    translation: translationText
                }));
            }
        }
        
        const tracker = new TranslationTracker();
        tracker.init();
        
        // Update status display
        function updateStatusDisplay(row, status) {
            const cells = row.querySelectorAll('td');
            let statusCell = null;
            
            // Find the cell containing the status-label
            for (let cell of cells) {
                if (cell.querySelector('.status-label')) {
                    statusCell = cell;
                    break;
                }
            }
            
            if (statusCell) {
                let statusHtml = '';
                switch (status) {
                    case 'translated':
                        statusHtml = `
                            <span class="status-label teal">
                                <span class="status teal"></span>
                                <span class="status-label-text">Translated</span>
                            </span>
                        `;
                        break;
                    case 'pending':
                        statusHtml = `
                            <span class="status-label orange">
                                <span class="status orange"></span>
                                <span class="status-label-text">Pending</span>
                            </span>
                        `;
                        break;
                    case 'unused':
                        statusHtml = `
                            <span class="status-label gray">
                                <span class="status gray"></span>
                                <span class="status-label-text">Unused</span>
                            </span>
                        `;
                        break;
                }
                
                if (statusHtml) {
                    statusCell.innerHTML = statusHtml;
                }
            }
        }
        
        // Save individual translation
        async function saveTranslation(id, translationText) {
            if (tracker.savingInProgress.has(id)) {
                return; // Already saving
            }
            
            tracker.savingInProgress.add(id);
            const row = document.querySelector(`tr[data-id="${id}"]`);
            const textarea = row.querySelector('.translation-text');
            
            // Show saving indicator
            textarea.style.opacity = '0.6';
            
            try {
                const response = await fetch('{{ actionUrl('translation-manager/translations/save') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'X-CSRF-Token': '{{ craft.app.request.csrfToken }}',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ id, translation: translationText })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    tracker.markSaved(id, translationText);
                    
                    // Update status if provided
                    if (data.status) {
                        updateStatusDisplay(row, data.status);
                    }
                    
                    // Flash green briefly
                    row.style.backgroundColor = '#d4edda';
                    setTimeout(() => row.style.backgroundColor = '', 800);
                } else {
                    throw new Error(data.error || 'Failed to save');
                }
            } catch (error) {
                console.error('Save error:', error);
                // Red background for error
                row.style.backgroundColor = '#fee';
                setTimeout(() => row.style.backgroundColor = '', 2000);
                Craft.cp.displayError('Failed to save translation');
            } finally {
                tracker.savingInProgress.delete(id);
                textarea.style.opacity = '';
            }
        }
        
        // Set up event listeners for each textarea
        document.querySelectorAll('.translation-text').forEach(textarea => {
            const row = textarea.closest('tr');
            const id = row.dataset.id;
            
            // Track changes
            textarea.addEventListener('input', function() {
                tracker.markChanged(id, this.value);
            });
            
            // Auto-save on blur if enabled
            textarea.addEventListener('blur', function() {
                if (tracker.unsavedChanges.has(id) && {{ settings.autoSaveEnabled|json_encode|raw }}) {
                    // Small delay to show the unsaved state briefly
                    setTimeout(() => {
                        saveTranslation(id, this.value);
                    }, 300);
                }
            });
            
            // Save on Ctrl/Cmd + Enter
            textarea.addEventListener('keydown', function(e) {
                if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                    e.preventDefault();
                    if (tracker.unsavedChanges.has(id)) {
                        saveTranslation(id, this.value);
                    }
                }
            });
        });
        
        // Save all button - only saves changed items
        {% if currentUser.can('translationManager:editTranslations') %}
        document.getElementById('save-all-btn')?.addEventListener('click', async function() {
            const unsavedChanges = tracker.getUnsavedChanges();
            
            if (unsavedChanges.length === 0) {
                Craft.cp.displayNotice('No changes to save');
                return;
            }
            
            const btn = this;
            btn.disabled = true;
            btn.classList.add('loading');
            
            // Show which translations we're saving
            Craft.cp.displayNotice(`Saving ${unsavedChanges.length} translation${unsavedChanges.length > 1 ? 's' : ''}...`);
            
            // Save in batches to avoid timeout
            const batchSize = 20;
            let saved = 0;
            let failed = 0;
            
            for (let i = 0; i < unsavedChanges.length; i += batchSize) {
                const batch = unsavedChanges.slice(i, i + batchSize);
                
                try {
                    // Save each translation in the batch
                    const promises = batch.map(({ id, translation }) => 
                        saveTranslation(id, translation)
                            .then(() => { saved++; return true; })
                            .catch(() => { failed++; return false; })
                    );
                    
                    await Promise.all(promises);
                } catch (error) {
                    console.error('Batch save error:', error);
                }
            }
            
            // Show results
            if (failed === 0) {
                Craft.cp.displayNotice(`Successfully saved ${saved} translation${saved > 1 ? 's' : ''}`);
            } else {
                Craft.cp.displayError(`Saved ${saved} translation${saved > 1 ? 's' : ''}, ${failed} failed`);
            }
            
            btn.disabled = false;
            btn.classList.remove('loading');
        });
        {% endif %}
        
        // Save on Ctrl+S / Cmd+S
        document.addEventListener('keydown', function(e) {
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault();
                document.getElementById('save-all-btn')?.click();
            }
        });
        
        // Warn before leaving with unsaved changes
        window.addEventListener('beforeunload', function(e) {
            if (tracker.hasUnsavedChanges()) {
                e.preventDefault();
                e.returnValue = 'You have unsaved translations. Are you sure you want to leave?';
                return e.returnValue;
            }
        });
        
        // Generate files functionality
        {% if not settings.autoExport and currentUser.can('translationManager:exportTranslations') %}
        function generateTranslationFiles(type) {
            let url;
            if (type === 'all') {
                url = '{{ actionUrl('translation-manager/export/files') }}';
            } else if (type === 'formie') {
                url = '{{ actionUrl('translation-manager/export/formie-files') }}';
            } else if (type === 'site') {
                url = '{{ actionUrl('translation-manager/export/site-files') }}';
            }
            
            console.log('Generating files for:', type);
            console.log('URL:', url);
            
            // Show loading spinner
            const generateAllBtn = document.getElementById('generate-all-btn');
            if (generateAllBtn) {
                generateAllBtn.classList.add('loading');
                generateAllBtn.disabled = true;
            }
            
            fetch(url, {
                method: 'POST',
                headers: {
                    'X-CSRF-Token': '{{ craft.app.request.csrfToken }}',
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Response data:', data);
                if (data.success) {
                    Craft.cp.displayNotice(data.message || 'Translation files generated successfully');
                } else {
                    Craft.cp.displayError(data.error || 'Failed to generate translation files');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Craft.cp.displayError('Failed to generate translation files');
            })
            .finally(() => {
                if (generateAllBtn) {
                    generateAllBtn.classList.remove('loading');
                    generateAllBtn.disabled = false;
                }
            });
        }
        
        // Attach click handlers
        const generateAllBtn = document.getElementById('generate-all-btn');
        if (generateAllBtn) {
            generateAllBtn.addEventListener('click', function() {
                generateTranslationFiles('all');
            });
        }
        
        const generateFormieBtn = document.getElementById('generate-formie-btn');
        if (generateFormieBtn) {
            generateFormieBtn.addEventListener('click', function(e) {
                e.preventDefault();
                generateTranslationFiles('formie');
            });
        }
        
        const generateSiteBtn = document.getElementById('generate-site-btn');
        if (generateSiteBtn) {
            generateSiteBtn.addEventListener('click', function(e) {
                e.preventDefault();
                generateTranslationFiles('site');
            });
        }
        {% endif %}
        
        // Warn before leaving with unsaved changes
        window.addEventListener('beforeunload', function(e) {
            if (tracker.hasUnsavedChanges()) {
                e.preventDefault();
                e.returnValue = 'You have unsaved translations. Are you sure you want to leave?';
                return e.returnValue;
            }
        });
    </script>
{% endblock %}