{% extends "translation-manager/_layouts/cp" %}
{% set title = "Settings"|t('translation-manager') %}
{% set fullPageForm = true %}
{% set selectedSubnavItem = 'settings' %}

{% set plugin = craft.app.plugins.getPlugin('translation-manager') %}
{% set crumbs = [
    {
        label: plugin.settings.pluginName|t('translation-manager'),
        url: url('translation-manager'),
    },
    {
        label: 'Settings'|t('translation-manager'),
        url: url('translation-manager/settings'),
    },
] %}

{% import "_includes/forms" as forms %}

{% block content %}
    {% set formiePluginName = craft.translationManager.getFormiePluginName() %}
    
    <form method="post" accept-charset="UTF-8">
        {{ csrfInput() }}
        {{ actionInput('translation-manager/settings/save') }}
        {{ redirectInput('translation-manager/settings') }}

        <h2>{{ "General Settings"|t('translation-manager') }}</h2>

        {{ forms.lightswitchField({
            label: "Enable Site Translations"|t('translation-manager'),
            instructions: "Capture translations from your templates"|t('translation-manager'),
            id: 'enableSiteTranslations',
            name: 'enableSiteTranslations',
            on: settings.enableSiteTranslations,
            toggle: 'site-translation-settings',
        }) }}

        <div id="site-translation-settings" class="{{ not settings.enableSiteTranslations ? 'hidden' }}">
            {{ forms.textField({
                label: "Site Translation Category"|t('translation-manager'),
                instructions: "The category to use for site translations (e.g. 'lindemannrock' for |t('lindemannrock')). This must be used in your templates when translating text. Avoid using 'site' as it may conflict with Craft's internal translations."|t('translation-manager'),
                id: 'translationCategory',
                name: 'translationCategory',
                value: settings.translationCategory,
                errors: settings.getErrors('translationCategory'),
                required: true,
                warning: settings.translationCategory == 'site' ? "Warning: Using 'site' as the category may cause conflicts with Craft's internal translations. Consider using a unique identifier like your company name."|t('translation-manager') : (settings.translationCategory != 'alhatab' ? "Changing this will affect all existing site translations. Make sure to update all |t() calls in your templates."|t('translation-manager') : null),
            }) }}

            {{ forms.textareaField({
                label: "Site Translations Skip Patterns"|t('translation-manager'),
                instructions: ("Text patterns to skip when capturing |t('" ~ settings.translationCategory ~ "') translations (one per line). Does not affect " ~ formiePluginName ~ " fields.")|t('translation-manager'),
                id: 'skipPatterns',
                name: 'skipPatterns',
                value: settings.skipPatterns|join("\n"),
                rows: 5,
                placeholder: "Example:\nID\nTitle\nStatus"|t('translation-manager'),
            }) }}
            
            {% if settings.skipPatterns|length > 0 %}
            <div class="field">
                <p class="instructions">
                    {{ "Note: Skip patterns only prevent NEW translations from being captured. To remove existing translations that match these patterns, use the button below."|t('translation-manager') }}
                </p>
                <button type="button" class="btn" id="applySkipPatternsBtn">
                    {{ "Apply Skip Patterns to Existing Translations"|t('translation-manager') }}
                </button>
            </div>
            {% endif %}
        </div>

        {{ forms.lightswitchField({
            label: ("Enable " ~ formiePluginName ~ " Integration")|t('translation-manager'),
            instructions: ("Automatically capture translations from " ~ formiePluginName)|t('translation-manager'),
            id: 'enableFormieIntegration',
            name: 'enableFormieIntegration',
            on: settings.enableFormieIntegration,
            disabled: not craft.app.plugins.isPluginEnabled('formie'),
            warning: not craft.app.plugins.isPluginEnabled('formie') ? (formiePluginName ~ " plugin is not installed")|t('translation-manager') : null,
        }) }}

        <hr>

        <h2>{{ "Export Settings"|t('translation-manager') }}</h2>

        {{ forms.lightswitchField({
            label: "Auto Export"|t('translation-manager'),
            instructions: "Automatically export translation files when translations are saved"|t('translation-manager'),
            id: 'autoExport',
            name: 'autoExport',
            on: settings.autoExport,
        }) }}

        {{ forms.autosuggestField({
            label: "Export Path"|t('translation-manager'),
            instructions: "The path where translation files should be exported"|t('translation-manager'),
            id: 'exportPath',
            name: 'exportPath',
            value: settings.exportPath,
            errors: settings.getErrors('exportPath'),
            required: true,
            suggestEnvVars: true,
        }) }}

        <hr>

        <h2>{{ "Interface Settings"|t('translation-manager') }}</h2>

        {{ forms.textField({
            label: "Items Per Page"|t('translation-manager'),
            instructions: "Number of translations to show per page"|t('translation-manager'),
            id: 'itemsPerPage',
            name: 'itemsPerPage',
            value: settings.itemsPerPage,
            errors: settings.getErrors('itemsPerPage'),
            type: 'number',
            min: 10,
            max: 500,
        }) }}

        {{ forms.lightswitchField({
            label: "Show Context"|t('translation-manager'),
            instructions: "Display the translation context in the interface"|t('translation-manager'),
            id: 'showContext',
            name: 'showContext',
            on: settings.showContext,
        }) }}

        <hr>

        <h2>{{ "Auto-Save Settings"|t('translation-manager') }}</h2>

        {{ forms.lightswitchField({
            label: "Enable Auto-Save"|t('translation-manager'),
            instructions: "Automatically save each translation when you click outside the field (blur)"|t('translation-manager'),
            id: 'autoSaveEnabled',
            name: 'autoSaveEnabled',
            on: settings.autoSaveEnabled,
        }) }}

        <hr>

        <h2>{{ "Advanced Settings"|t('translation-manager') }}</h2>

        {{ forms.lightswitchField({
            label: "Enable Translation Suggestions"|t('translation-manager'),
            instructions: "Show AI-powered translation suggestions when editing translations (Coming Soon)"|t('translation-manager'),
            id: 'enableSuggestions',
            name: 'enableSuggestions',
            on: settings.enableSuggestions,
            disabled: true,
            warning: "This feature is planned for a future release. When enabled, it will provide intelligent translation suggestions based on context and previously translated content."|t('translation-manager'),
        }) }}

    </form>
    
    <hr>
    
    <h2>{{ "Import/Export"|t('translation-manager') }}</h2>
    
    <div class="field">
        <div class="heading">
            <label>{{ "Import from CSV"|t('translation-manager') }}</label>
            <div class="instructions">
                <p>{{ "Import translations from a CSV file"|t('translation-manager') }}</p>
            </div>
        </div>
        <div class="input">
            <form id="import-form" method="post" enctype="multipart/form-data">
                {{ csrfInput() }}
                <input type="hidden" name="action" value="translation-manager/import">
                
                <div class="flex" style="gap: 12px; align-items: flex-start;">
                    <div class="flex-grow">
                        <input type="file" name="csvFile" id="csv-file-input" accept=".csv,.txt" />
                        <div class="info" style="margin-top: 8px;">
                            <p><strong>{{ "CSV Format:"|t('translation-manager') }}</strong></p>
                            <ul style="margin-top: 4px;">
                                <li>{{ "English Text"|t('translation-manager') }} ({{ "required"|t('translation-manager') }})</li>
                                <li>{{ "Arabic Translation"|t('translation-manager') }} ({{ "optional"|t('translation-manager') }})</li>
                                <li>{{ "Context"|t('translation-manager') }} ({{ "optional, defaults to 'site'"|t('translation-manager') }})</li>
                            </ul>
                            <p style="margin-top: 8px;">{{ "Example:"|t('translation-manager') }}</p>
                            <pre style="background: #f3f4f6; padding: 8px; border-radius: 4px; font-size: 12px; margin-top: 4px;">English Text,Arabic Translation,Context
"Welcome","مرحباً","site"
"Contact Us","اتصل بنا","site"</pre>
                        </div>
                    </div>
                    <button type="submit" class="btn submit" id="import-btn">
                        {{ "Import"|t('translation-manager') }}
                    </button>
                </div>
                
                <div id="import-results" style="margin-top: 20px; display: none;">
                    <div id="import-success" class="success" style="display: none;"></div>
                    <div id="import-error" class="error" style="display: none;"></div>
                    <div id="import-errors-list" style="display: none; margin-top: 12px;">
                        <p class="light">{{ "Some rows had errors:"|t('translation-manager') }}</p>
                        <ul style="margin-top: 8px;" id="errors-list"></ul>
                    </div>
                </div>
            </form>
        </div>
    </div>
    
    <hr>
    
    <h2>{{ "Maintenance"|t('translation-manager') }}</h2>
    
    {% if settings.enableFormieIntegration %}
        {% set unusedCount = craft.translationManager.getUnusedTranslationCount() %}
        <div class="field">
            <div class="heading">
                <label>{{ "Unused Form Translations"|t('translation-manager') }}</label>
                <div class="instructions">
                    <p>{{ "Remove translations for forms that no longer exist"|t('translation-manager') }}</p>
                </div>
            </div>
            <div class="input">
                <div class="flex">
                    <div class="flex-grow">
                        {% if unusedCount > 0 %}
                            <p class="light">{{ "You have {count} unused translation(s) from deleted forms"|t('translation-manager', {count: unusedCount}) }}</p>
                        {% else %}
                            <p class="light">{{ "No unused translations found"|t('translation-manager') }}</p>
                        {% endif %}
                    </div>
                    <button type="button" class="btn formsubmit {{ unusedCount > 0 ? '' : 'disabled' }}" 
                            data-action="translation-manager/maintenance/clean-unused"
                            data-redirect="{{ 'translation-manager/settings'|hash }}"
                            {{ unusedCount > 0 ? '' : 'disabled' }}>
                        {{ "Clean Up"|t('translation-manager') }}
                    </button>
                </div>
            </div>
        </div>
    {% endif %}
    
    <hr>
    
    <h2 class="error">{{ "Danger Zone"|t('translation-manager') }}</h2>
    
    <div class="field">
        <p class="warning">
            <span class="icon" aria-hidden="true"></span>
            {{ "Warning: These actions are permanent and cannot be undone. Make sure to export your translations before clearing."|t('translation-manager') }}
        </p>
    </div>
    
    {% if settings.enableFormieIntegration or settings.enableSiteTranslations %}
    <div class="field">
        <div class="btngroup">
            <a href="{{ actionUrl('translation-manager/export') }}" class="btn">
                <span class="icon" aria-hidden="true" style="margin-right: 5px;">{{ svg('@appicons/download.svg') }}</span>
                {{ "Export All Translations"|t('translation-manager') }}
            </a>
        </div>
    </div>
    {% endif %}
    
    {% set clearOptions = [{ value: '', label: 'Select an option'|t('translation-manager') }] %}
    {% if settings.enableFormieIntegration %}
        {% set clearOptions = clearOptions|merge([{ value: 'formie', label: (craft.translationManager.getFormiePluginName() ~ ' Translations Only')|t('translation-manager') }]) %}
    {% endif %}
    {% if settings.enableSiteTranslations %}
        {% set clearOptions = clearOptions|merge([{ value: 'site', label: ('Site Translations Only (|t(\'' ~ settings.translationCategory ~ '\'))')|t('translation-manager') }]) %}
    {% endif %}
    {% if settings.enableFormieIntegration or settings.enableSiteTranslations %}
        {% set clearOptions = clearOptions|merge([{ value: 'all', label: 'All Translations'|t('translation-manager') }]) %}
    {% endif %}
    
    {% if settings.enableFormieIntegration or settings.enableSiteTranslations %}
    {{ forms.selectField({
        label: "Clear Translations"|t('translation-manager'),
        instructions: "Select which translations to permanently delete from the database and remove corresponding translation files."|t('translation-manager'),
        id: 'clearType',
        name: 'clearType',
        options: clearOptions,
        value: ''
    }) }}
    {% else %}
    <div class="field">
        <div class="heading">
            <label>{{ "Clear Translations"|t('translation-manager') }}</label>
        </div>
        <p class="light">{{ ("No translation integrations are currently enabled. Enable " ~ formiePluginName ~ " Integration or Site Translations above to start capturing translations.")|t('translation-manager') }}</p>
    </div>
    {% endif %}
    
    {% if settings.enableFormieIntegration or settings.enableSiteTranslations %}
    <div id="clearDescription" style="margin-top: 12px; padding: 12px; background: #FEE2E2; border: 1px solid #FECACA; border-radius: 4px; display: none;">
        <p id="clearDescriptionText" style="margin: 0; color: #991B1B;"></p>
    </div>
    
    <div style="margin-top: 20px;">
        <button type="button" id="clearButton" class="btn submit formaction" style="display: none;" data-redirect="{{ 'translation-manager/settings'|hash }}">
            {{ "Clear Selected Translations"|t('translation-manager') }}
        </button>
    </div>
    {% endif %}
{% endblock %}

{% js %}
    // Warn when using 'site' as translation category and update instructions
    document.getElementById('translationCategory').addEventListener('input', function(e) {
        const value = e.target.value.trim();
        const valueLower = value.toLowerCase();
        const field = e.target.closest('.field');
        let warningElement = field.querySelector('.warning');
        
        // Update the site translations instructions
        const siteTranslationsField = document.getElementById('enableSiteTranslations').closest('.field');
        const instructionsElement = siteTranslationsField.querySelector('.instructions p');
        if (instructionsElement) {
            instructionsElement.textContent = 'Capture translations using the |t(\'' + value + '\') filter in your templates';
        }
        
        if (valueLower === 'site') {
            if (!warningElement) {
                warningElement = document.createElement('p');
                warningElement.className = 'warning';
                field.appendChild(warningElement);
            }
            warningElement.innerHTML = '<span class="icon" aria-hidden="true"></span>{{ "Warning: Using \'site\' as the category may cause conflicts with Craft\'s internal translations. Consider using a unique identifier like your company name."|t('translation-manager')|e('js') }}';
            
            // Show confirmation dialog
            if (!this.dataset.confirmed && valueLower === 'site') {
                const confirmed = confirm('{{ "Are you sure you want to use \'site\' as the translation category? This may conflict with Craft\'s internal translations. We recommend using a unique identifier like your company name instead."|t('translation-manager')|e('js') }}');
                if (!confirmed) {
                    this.value = this.defaultValue || 'alhatab';
                } else {
                    this.dataset.confirmed = 'true';
                }
            }
        } else if (warningElement && valueLower !== 'site') {
            // Remove warning if not 'site'
            if (this.defaultValue && value !== this.defaultValue) {
                warningElement.innerHTML = '<span class="icon" aria-hidden="true"></span>{{ "Changing this will affect all existing site translations. Make sure to update all |t() calls in your templates."|t('translation-manager')|e('js') }}';
            } else {
                warningElement.remove();
            }
        }
    });
    
    // Handle danger zone clear type selection
    const clearTypeSelect = document.getElementById('clearType');
    const clearDescription = document.getElementById('clearDescription');
    const clearDescriptionText = document.getElementById('clearDescriptionText');
    const clearButton = document.getElementById('clearButton');
    
    if (clearTypeSelect) {
        const hasFormie = {{ settings.enableFormieIntegration ? 'true' : 'false' }};
        const hasSite = {{ settings.enableSiteTranslations ? 'true' : 'false' }};
        const formiePluginName = '{{ craft.translationManager.getFormiePluginName()|e('js') }}';
        
        let allDescription = '{{ "This will permanently delete ALL translations from the database and remove all translation files. Use this to start completely fresh."|t('translation-manager')|e('js') }}';
        if (hasFormie && hasSite) {
            allDescription = '{{ "This will permanently delete ALL translations from the database and remove all translation files, including both "|t('translation-manager')|e('js') }}' + formiePluginName + '{{ " and site translations. Use this to start completely fresh."|t('translation-manager')|e('js') }}';
        }
        
        const descriptions = {
            formie: '{{ "This will permanently delete all "|t('translation-manager')|e('js') }}' + formiePluginName + '{{ " form translations from the database and remove the corresponding translation files. Your forms will not be affected, only the stored translations will be removed."|t('translation-manager')|e('js') }}',
            site: '{{ ("This will permanently delete all site translations using |t(\'" ~ settings.translationCategory ~ "\') from the database and remove the corresponding translation files. You will need to re-translate all site content.")|t('translation-manager')|e('js') }}',
            all: allDescription
        };
    
        const confirmMessages = {
            formie: '{{ "Are you sure you want to delete all "|t('translation-manager')|e('js') }}' + formiePluginName + '{{ " translations and their files? This action cannot be undone."|t('translation-manager')|e('js') }}',
            site: '{{ ("Are you sure you want to delete all site translations for the \'" ~ settings.translationCategory ~ "\' category and their files? This action cannot be undone.")|t('translation-manager')|e('js') }}',
            all: '{{ "Are you absolutely sure you want to delete ALL translations and files? This will remove both "|t('translation-manager')|e('js') }}' + formiePluginName + '{{ " and site translations. This action cannot be undone."|t('translation-manager')|e('js') }}'
        };
        
        const actions = {
            formie: 'translation-manager/settings/clear-formie',
            site: 'translation-manager/settings/clear-site',
            all: 'translation-manager/settings/clear-all'
        };
    
        clearTypeSelect.addEventListener('change', function() {
            const value = this.value;
            
            if (value) {
                clearDescription.style.display = 'block';
                clearDescriptionText.textContent = descriptions[value];
                clearButton.style.display = 'inline-block';
                clearButton.setAttribute('data-action', actions[value]);
                clearButton.setAttribute('data-confirm', confirmMessages[value]);
                
                // Make the button red for "all" option
                if (value === 'all') {
                    clearButton.classList.add('error');
                } else {
                    clearButton.classList.remove('error');
                }
            } else {
                clearDescription.style.display = 'none';
                clearButton.style.display = 'none';
            }
        });
        
        // Handle clear button click
        clearButton.addEventListener('click', function() {
            const action = this.getAttribute('data-action');
            const confirmMessage = this.getAttribute('data-confirm');
            
            if (action && confirm(confirmMessage)) {
                // Create a form and submit it
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '';
                form.style.display = 'none';
                
                // Add CSRF token
                const csrfInput = document.createElement('input');
                csrfInput.type = 'hidden';
                csrfInput.name = '{{ craft.app.config.general.csrfTokenName }}';
                csrfInput.value = '{{ craft.app.request.csrfToken }}';
                form.appendChild(csrfInput);
                
                // Add action input
                const actionInput = document.createElement('input');
                actionInput.type = 'hidden';
                actionInput.name = 'action';
                actionInput.value = action;
                form.appendChild(actionInput);
                
                // Add redirect input with proper hash
                const redirectInput = document.createElement('input');
                redirectInput.type = 'hidden';
                redirectInput.name = 'redirect';
                redirectInput.value = '{{ 'translation-manager/settings'|hash }}';
                form.appendChild(redirectInput);
                
                // Submit form
                document.body.appendChild(form);
                form.submit();
            }
        });
    }
    
    // Handle Apply Skip Patterns button
    const applySkipPatternsBtn = document.getElementById('applySkipPatternsBtn');
    if (applySkipPatternsBtn) {
        applySkipPatternsBtn.addEventListener('click', function() {
            if (confirm('{{ 'Are you sure you want to remove existing translations that match the skip patterns? This action cannot be undone.'|t('translation-manager')|e('js') }}')) {
                // Create a form and submit it
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '';
                form.style.display = 'none';
                
                // Add CSRF token
                const csrfInput = document.createElement('input');
                csrfInput.type = 'hidden';
                csrfInput.name = '{{ craft.app.config.general.csrfTokenName }}';
                csrfInput.value = '{{ craft.app.request.csrfToken }}';
                form.appendChild(csrfInput);
                
                // Add action input
                const actionInput = document.createElement('input');
                actionInput.type = 'hidden';
                actionInput.name = 'action';
                actionInput.value = 'translation-manager/settings/apply-skip-patterns';
                form.appendChild(actionInput);
                
                // Add redirect input with proper hash
                const redirectInput = document.createElement('input');
                redirectInput.type = 'hidden';
                redirectInput.name = 'redirect';
                redirectInput.value = '{{ 'translation-manager/settings'|hash }}';
                form.appendChild(redirectInput);
                
                // Submit form
                document.body.appendChild(form);
                form.submit();
            }
        });
    }

    // Handle Site Translations toggle
    const siteTranslationsToggle = document.getElementById('enableSiteTranslations');
    const translationCategoryField = document.getElementById('translationCategory-field');
    
    if (siteTranslationsToggle) {
        // Update instructions when toggle changes
        siteTranslationsToggle.addEventListener('change', function() {
            const instructions = document.querySelector('label[for="enableSiteTranslations"] + .instructions p');
            if (this.checked && translationCategoryField) {
                const categoryInput = document.getElementById('translationCategory');
                if (categoryInput && categoryInput.value) {
                    instructions.textContent = '{{ "Capture translations using the |t(\'" ~ settings.translationCategory ~ "\') filter in your templates"|t('translation-manager')|e('js') }}';
                }
            }
        });
    }
    
    // Import form handling
    document.getElementById('import-form')?.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const fileInput = document.getElementById('csv-file-input');
        const file = fileInput.files[0];
        const submitBtn = document.getElementById('import-btn');
        const resultsDiv = document.getElementById('import-results');
        const successDiv = document.getElementById('import-success');
        const errorDiv = document.getElementById('import-error');
        const errorsList = document.getElementById('import-errors-list');
        const errorsUl = document.getElementById('errors-list');
        
        // Hide previous results
        resultsDiv.style.display = 'none';
        successDiv.style.display = 'none';
        errorDiv.style.display = 'none';
        errorsList.style.display = 'none';
        
        if (!file) {
            errorDiv.textContent = 'Please select a CSV file';
            errorDiv.style.display = 'block';
            resultsDiv.style.display = 'block';
            return;
        }
        
        // Validate file type
        const validTypes = ['text/csv', 'text/plain', 'application/csv', 'application/vnd.ms-excel'];
        if (!validTypes.includes(file.type) && !file.name.endsWith('.csv')) {
            errorDiv.textContent = 'Please select a valid CSV file';
            errorDiv.style.display = 'block';
            resultsDiv.style.display = 'block';
            return;
        }
        
        // Validate file size (5MB)
        if (file.size > 5242880) {
            errorDiv.textContent = 'File size exceeds 5MB limit';
            errorDiv.style.display = 'block';
            resultsDiv.style.display = 'block';
            return;
        }
        
        // Show loading
        submitBtn.classList.add('loading');
        submitBtn.disabled = true;
        
        // Create form data
        const formData = new FormData();
        formData.append('csvFile', file);
        formData.append('{{ craft.app.config.general.csrfTokenName }}', '{{ craft.app.request.csrfToken }}');
        
        // Submit
        fetch('{{ actionUrl('translation-manager/import') }}', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            submitBtn.classList.remove('loading');
            submitBtn.disabled = false;
            resultsDiv.style.display = 'block';
            
            if (data.success) {
                let message = `Successfully imported ${data.imported} new translation${data.imported !== 1 ? 's' : ''}`;
                if (data.updated > 0) {
                    message += ` and updated ${data.updated} existing translation${data.updated !== 1 ? 's' : ''}`;
                }
                if (data.skipped > 0) {
                    message += ` (${data.skipped} skipped)`;
                }
                
                successDiv.textContent = message;
                successDiv.style.display = 'block';
                
                // Show errors if any
                if (data.errors && data.errors.length > 0) {
                    errorsUl.innerHTML = data.errors.map(err => '<li>' + err + '</li>').join('');
                    errorsList.style.display = 'block';
                }
                
                // Clear file input for next import
                fileInput.value = '';
            } else {
                errorDiv.textContent = data.error || 'Import failed';
                errorDiv.style.display = 'block';
            }
        })
        .catch(error => {
            submitBtn.classList.remove('loading');
            submitBtn.disabled = false;
            resultsDiv.style.display = 'block';
            errorDiv.textContent = 'Import failed: ' + error.message;
            errorDiv.style.display = 'block';
        });
    });
{% endjs %}