{% extends "translation-manager/_layouts/settings" %}
{% set title = "Backup"|t('translation-manager') %}
{% set fullPageForm = true %}
{% set selectedSubnavItem = 'backup' %}

{% set plugin = craft.app.plugins.getPlugin('translation-manager') %}
{% set crumbs = [
    {
        label: plugin.settings.pluginName|t('translation-manager'),
        url: url('translation-manager'),
    },
    {
        label: 'Settings'|t('translation-manager'),
        url: url('translation-manager/settings'),
    },
    {
        label: 'Backup'|t('translation-manager'),
        url: url('translation-manager/settings/backup'),
    },
] %}

{% set tabs = {
    settings: {
        label: 'Settings'|t('translation-manager'),
        url: '#settings',
    },
    history: {
        label: 'Backup History'|t('translation-manager'),
        url: '#history',
    },
} %}

{% import "_includes/forms" as forms %}

{% block content %}
    <form method="post" accept-charset="UTF-8">
        {{ csrfInput() }}
        {{ actionInput('translation-manager/settings/save') }}
        {{ redirectInput('translation-manager/settings/backup') }}

    <div id="settings">
        <h2>{{ "Backup Settings"|t('translation-manager') }}</h2>

        {{ forms.lightswitchField({
            label: "Enable Backups"|t('translation-manager'),
            instructions: "Enable automatic backup functionality for translations"|t('translation-manager'),
            id: 'backupEnabled',
            name: 'backupEnabled',
            on: settings.backupEnabled,
            toggle: 'backup-settings',
            disabled: settings.isOverriddenByConfig('backupEnabled'),
            warning: settings.isOverriddenByConfig('backupEnabled') ? 
                "This is being overridden by the <code>backupEnabled</code> setting in <code>config/translation-manager.php</code>."|raw : null,
        }) }}

        <div id="backup-settings" class="{{ not settings.backupEnabled ? 'hidden' }}">
            {{ forms.lightswitchField({
                label: "Backup Before Import"|t('translation-manager'),
                instructions: "Automatically create a backup before importing CSV files"|t('translation-manager'),
                id: 'backupOnImport',
                name: 'backupOnImport',
                on: settings.backupOnImport,
                disabled: settings.isOverriddenByConfig('backupOnImport'),
                warning: settings.isOverriddenByConfig('backupOnImport') ? 
                    "This is being overridden by the <code>backupOnImport</code> setting in <code>config/translation-manager.php</code>."|raw : null,
            }) }}

            {{ forms.selectField({
                label: "Backup Schedule"|t('translation-manager'),
                instructions: "How often to create automatic backups. Uses Craft's queue if running, or set up a cron job:"|t('translation-manager') ~ '<br><code style="display: inline-block; margin-top: 4px;">craft translation-manager/backup/scheduled</code>',
                id: 'backupSchedule',
                name: 'backupSchedule',
                value: settings.backupSchedule,
                options: [
                    { label: 'Manual Only', value: 'manual' },
                    { label: 'Daily', value: 'daily' },
                    { label: 'Weekly', value: 'weekly' },
                    { label: 'Monthly', value: 'monthly' },
                ],
                errors: settings.getErrors('backupSchedule'),
                disabled: settings.isOverriddenByConfig('backupSchedule'),
                warning: settings.isOverriddenByConfig('backupSchedule') ? 
                    "This is being overridden by the <code>backupSchedule</code> setting in <code>config/translation-manager.php</code>."|raw : null,
            }) }}

            {{ forms.textField({
                label: "Retention Period"|t('translation-manager'),
                instructions: "Number of days to keep automatic backups (0 = keep forever). Manual backups are never deleted automatically."|t('translation-manager'),
                id: 'backupRetentionDays',
                name: 'backupRetentionDays',
                value: settings.backupRetentionDays,
                errors: settings.getErrors('backupRetentionDays'),
                type: 'number',
                min: 0,
                max: 365,
                disabled: settings.isOverriddenByConfig('backupRetentionDays'),
                warning: settings.isOverriddenByConfig('backupRetentionDays') ?
                    "This is being overridden by the <code>backupRetentionDays</code> setting in <code>config/translation-manager.php</code>."|raw : null,
            }) }}

            {# Asset volume selection dropdown for backups #}
            {% set volumeOptions = [{label: 'Use custom path'|t('translation-manager'), value: ''}] %}
            {% for volume in craft.app.volumes.getAllVolumes() %}
                {% set volumeOptions = volumeOptions|merge([{
                    label: volume.name,
                    value: volume.uid
                }]) %}
            {% endfor %}

            {{ forms.selectField({
                label: "Backup Storage Volume"|t('translation-manager'),
                instructions: "Which asset volume should be used for storing backups. Backups will be stored in a 'translation-manager/backups' subdirectory. Note: Cloud storage volumes (Servd, S3, etc.) are not supported for backups and will fall back to local storage."|t('translation-manager'),
                id: 'backupVolumeUid',
                name: 'backupVolumeUid',
                options: volumeOptions,
                value: settings.backupVolumeUid ?? '',
                disabled: settings.isOverriddenByConfig('backupVolumeUid'),
                warning: settings.isOverriddenByConfig('backupVolumeUid') ?
                    "This is being overridden by the <code>backupVolumeUid</code> setting in <code>config/translation-manager.php</code>."|raw : null,
            }) }}

            <div id="custom-backup-path" class="{{ settings.backupVolumeUid ? 'hidden' }}">
                {{ forms.autosuggestField({
                    label: "Custom Backup Path"|t('translation-manager'),
                    instructions: "The custom path where backups should be stored (only used when no volume is selected)"|t('translation-manager'),
                    id: 'backupPath',
                    name: 'backupPath',
                    value: settings.backupPath,
                    errors: settings.getErrors('backupPath'),
                    required: not settings.backupVolumeUid,
                    suggestEnvVars: true,
                    disabled: settings.isOverriddenByConfig('backupPath'),
                    warning: settings.isOverriddenByConfig('backupPath') ?
                        "This is being overridden by the <code>backupPath</code> setting in <code>config/translation-manager.php</code>."|raw : null,
                }) }}
            </div>
        </div>

        <div class="buttons">
            <button type="submit" class="btn submit">{{ "Save"|t('translation-manager') }}</button>
        </div>
    </div>
    </form>

<div id="history" class="hidden">
    <div class="flex" style="align-items: center; margin-bottom: 24px;">
        <h2 style="margin: 0;">{{ "Backup History"|t('translation-manager') }}</h2>
        <div style="margin-left: auto;">
            <button type="button" class="btn" id="create-backup-btn">
                <span class="icon" aria-hidden="true">{{ svg('@appicons/database.svg') }}</span>
                {{ "Create Backup Now"|t('translation-manager') }}
            </button>
        </div>
    </div>
    
    {% set backups = craft.translationManager.backup.getBackups() %}
    
    {% if backups|length %}
        <table class="data fullwidth">
            <thead>
                <tr>
                    <th>{{ "Date"|t('translation-manager') }}</th>
                    <th>{{ "Reason"|t('translation-manager') }}</th>
                    <th>{{ "Created By"|t('translation-manager') }}</th>
                    <th>{{ "Translations"|t('translation-manager') }}</th>
                    <th>{{ "Size"|t('translation-manager') }}</th>
                    <th class="thin"></th>
                </tr>
            </thead>
            <tbody>
                {% for backup in backups %}
                    <tr>
                        <td class="thin">{{ backup.timestamp|datetime('short') }}</td>
                        <td>
                            {% switch backup.reason %}
                                {% case 'manual' %}
                                    {{ "Manual"|t('translation-manager') }}
                                {% case 'before_import' %}
                                    {{ "Before Import"|t('translation-manager') }}
                                {% case 'before_restore' %}
                                    {{ "Before Restore"|t('translation-manager') }}
                                {% case 'scheduled' %}
                                    {{ "Scheduled"|t('translation-manager') }}
                                {% case 'before_clear_all' %}
                                    {{ "Before Clear All"|t('translation-manager') }}
                                {% case 'before_clear_formie' %}
                                    {{ "Before Clear " ~ craft.translationManager.getFormiePluginName() }}
                                {% case 'before_clear_site' %}
                                    {{ "Before Clear Site"|t('translation-manager') }}
                                {% case 'before_cleanup' %}
                                    {{ "Before Cleanup"|t('translation-manager') }}
                                {% default %}
                                    {{ backup.reason|t('translation-manager') }}
                            {% endswitch %}
                        </td>
                        <td>{{ backup.user }}</td>
                        <td>{{ backup.translationCount }}</td>
                        <td>{{ craft.translationManager.backup.formatBytes(backup.size) }}</td>
                        <td class="thin">
                            <button type="button" class="btn menubtn" data-icon="settings" title="{{ 'Actions'|t('translation-manager') }}"></button>
                            <div class="menu" data-align="right">
                                <ul>
                                    <li><a href="#" class="restore-backup" data-backup="{{ backup.name }}">
                                        <span class="icon" aria-hidden="true">{{ svg('@appicons/share.svg') }}</span>
                                        {{ "Restore"|t('translation-manager') }}
                                    </a></li>
                                    <li><a href="{{ actionUrl('translation-manager/backup/download', { backup: backup.name }) }}">
                                        <span class="icon" aria-hidden="true">{{ svg('@appicons/download.svg') }}</span>
                                        {{ "Download"|t('translation-manager') }}
                                    </a></li>
                                    <li><hr></li>
                                    <li><a href="#" class="delete-backup error" data-backup="{{ backup.name }}">
                                        <span class="icon" aria-hidden="true">{{ svg('@appicons/trash.svg') }}</span>
                                        {{ "Delete"|t('translation-manager') }}
                                    </a></li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    {% else %}
        <p class="light">{{ "No backups found. Create your first backup using the button above."|t('translation-manager') }}</p>
    {% endif %}
    
    {% set backupPath = craft.translationManager.backup.getBackupPath() %}
    <div class="field" style="margin-top: 24px;">
        <div class="heading">
            <label>{{ "Backup Location"|t('translation-manager') }}</label>
        </div>
        <div class="input">
            <code style="background: #f3f4f6; padding: 8px; border-radius: 4px; font-size: 12px;">{{ backupPath }}</code>
        </div>
    </div>
</div>

{% include 'translation-manager/_components/plugin-credit.twig' %}
{% endblock %}

{% js %}
    // Handle volume selector change
    document.addEventListener('DOMContentLoaded', function() {
        const volumeSelect = document.getElementById('backupVolumeUid');
        const customPathDiv = document.getElementById('custom-backup-path');
        const pathField = document.getElementById('backupPath');

        if (volumeSelect) {
            volumeSelect.addEventListener('change', function() {
                if (this.value) {
                    // Volume is selected, hide custom path
                    customPathDiv.classList.add('hidden');
                    pathField.removeAttribute('required');
                } else {
                    // No volume selected, show custom path
                    customPathDiv.classList.remove('hidden');
                    pathField.setAttribute('required', 'required');
                }
            });
        }
    });

    // Handle tab switching to show/hide save button
    document.addEventListener('DOMContentLoaded', function() {
        const saveButton = document.querySelector('#save-btn-container');
        
        // Function to toggle save button visibility
        function toggleSaveButton() {
            const historyTab = document.querySelector('#history');
            if (historyTab && !historyTab.classList.contains('hidden')) {
                if (saveButton) saveButton.style.display = 'none';
            } else {
                if (saveButton) saveButton.style.display = '';
            }
        }
        
        // Listen for tab clicks
        document.querySelectorAll('.tabs a').forEach(tab => {
            tab.addEventListener('click', function() {
                setTimeout(toggleSaveButton, 50);
            });
        });
        
        // Check if we should show the history tab from URL hash
        if (window.location.hash === '#history') {
            const historyTabLink = document.querySelector('a[href="#history"]');
            if (historyTabLink) {
                historyTabLink.click();
            }
        }
        // Check if we should show the history tab after reload
        else if (sessionStorage.getItem('showBackupHistoryTab') === 'true') {
            sessionStorage.removeItem('showBackupHistoryTab');
            // Click the history tab
            const historyTab = document.querySelector('a[href="#history"]');
            if (historyTab) {
                historyTab.click();
            }
        } else {
            // Initial check
            toggleSaveButton();
        }
    });
    
    // Initialize menu buttons
    document.querySelectorAll('.menubtn').forEach(btn => {
        if (typeof Garnish !== 'undefined' && Garnish.MenuBtn) {
            new Garnish.MenuBtn(btn);
        }
    });
    
    document.getElementById('create-backup-btn')?.addEventListener('click', function() {
        const btn = this;
        btn.classList.add('loading');
        btn.disabled = true;
        
        fetch('{{ actionUrl('translation-manager/backup/create') }}', {
            method: 'POST',
            headers: {
                'X-CSRF-Token': '{{ craft.app.request.csrfToken }}',
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
                '{{ craft.app.config.general.csrfTokenName }}': '{{ craft.app.request.csrfToken }}',
                reason: 'manual' 
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            btn.classList.remove('loading');
            btn.disabled = false;
            
            if (data.success) {
                Craft.cp.displayNotice(data.message || 'Backup created successfully');
                // Store that we want to show the history tab after reload
                sessionStorage.setItem('showBackupHistoryTab', 'true');
                // Reload page to show new backup
                window.location.reload();
            } else {
                Craft.cp.displayError(data.error || 'Failed to create backup');
            }
        })
        .catch(error => {
            btn.classList.remove('loading');
            btn.disabled = false;
            Craft.cp.displayError('Failed to create backup: ' + error.message);
        });
    });
    
    // Restore backup - use event delegation
    document.addEventListener('click', function(e) {
        const restoreLink = e.target.closest('.restore-backup');
        if (!restoreLink) return;
        
        e.preventDefault();
        e.stopPropagation();
        
        const backupName = restoreLink.dataset.backup;
        const message = '{{ "Are you sure you want to restore this backup? This will replace all current translations. A backup of the current state will be created before restoring."|t('translation-manager')|e('js') }}';
        
        if (confirm(message)) {
            fetch('{{ actionUrl('translation-manager/backup/restore') }}', {
                method: 'POST',
                headers: {
                    'X-CSRF-Token': '{{ craft.app.request.csrfToken }}',
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ backup: backupName })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Craft.cp.displayNotice(data.message || 'Backup restored successfully');
                    // Reload page to refresh data
                    setTimeout(() => window.location.reload(), 1500);
                } else {
                    Craft.cp.displayError(data.message || 'Failed to restore backup');
                }
            })
            .catch(error => {
                Craft.cp.displayError('Failed to restore backup: ' + error.message);
            });
        }
    });
    
    // Delete backup - use event delegation to handle dynamically created menu items
    document.addEventListener('click', function(e) {
        const deleteLink = e.target.closest('.delete-backup');
        if (!deleteLink) return;
        
        e.preventDefault();
        e.stopPropagation();
        
        const backupName = deleteLink.dataset.backup;
        const deleteUrl = '{{ cpUrl('translation-manager/backup/delete') }}';
        const message = '{{ "Are you sure you want to delete this backup? This action cannot be undone."|t('translation-manager')|e('js') }}';
        
        if (confirm(message)) {
            fetch(deleteUrl, {
                method: 'POST',
                headers: {
                    'X-CSRF-Token': '{{ craft.app.request.csrfToken }}',
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ backup: backupName })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Craft.cp.displayNotice(data.message || 'Backup deleted successfully');
                    // Store that we want to show the history tab after reload
                    sessionStorage.setItem('showBackupHistoryTab', 'true');
                    // Reload page
                    window.location.reload();
                } else {
                    Craft.cp.displayError(data.error || 'Failed to delete backup');
                }
            })
            .catch(error => {
                Craft.cp.displayError('Failed to delete backup: ' + error.message);
            });
        }
    });
{% endjs %}